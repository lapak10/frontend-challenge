{"version":3,"sources":["components/navbar.js","components/yearcard.js","pages/HomePage.js","components/countryflag.js","pages/SeasonDetail.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","isOpen","toggleCollapse","_this","setState","react_default","a","createElement","mdbreact_esm","className","dark","expand","left","to","style","display","this","props","page","class","concat","year","onClick","id","navbar","Component","YearCard","Link","winnerid","news","marginTop","fontSize","driver","givenName","familyName","won","points","HomePage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","name","race_list","console","log","match","params","_this2","fetch","then","response","json","repos","MRData","StandingsTable","StandingsLists","length","navbar_Navbar","fluid","center","map","i","key","size","yearcard_YearCard","DriverStandings","Driver","wins","driverId","winner","season","marginLeft","role","CountryFlag","country","spanish","german","finnish","british","australian","italian","colombian","brazilian","polish","venezuelan","french","austrian","countryname","toLowerCase","alt","src","get_country_code","SeasonDetail","season_races","winner_code","url","RaceTable","Races","hover","color","textWhite","race","backgroundColor","Results","raceName","Circuit","circuitName","countryflag_CountryFlag","nationality","outline","href","Constructor","target","laps","Time","time","bind","Routes","Switch","Route","path","component","render","React","AppRouter","BrowserRouter","src_Routes","Boolean","window","location","hostname","ReactDOM","App_AppRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a75ee294.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse } from \"mdbreact\";\n\nexport default class Navbar extends Component {\n  state = {\n    isOpen: false\n  };\n\n  toggleCollapse = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n\n  render() {\n    return (\n      <MDBNavbar className=\"blue-gradient\" dark expand=\"md\">\n        <MDBNavbarNav left>\n\n          <MDBNavItem>\n            <MDBNavLink to=\"/\"><i style={{ display: this.props.page === 'season' ? '' : 'none' }} class=\"fas fa-chevron-left\"></i>\n              <MDBNavbarBrand>\n                <strong className=\"white-text\">{this.props.page === 'season' ? `Races of ${this.props.year}` : 'FinCompare ScoreBoard'}</strong>\n              </MDBNavbarBrand></MDBNavLink>\n          </MDBNavItem>\n\n        </MDBNavbarNav>\n\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n\n\n        </MDBCollapse>\n\n      </MDBNavbar>\n    );\n  }\n}","import React, { Component } from 'react'\nimport { Link } from \"react-router-dom\"\nimport { MDBCard, MDBCardTitle, MDBCardText, MDBCardBody } from 'mdbreact'\n\nexport default class YearCard extends Component {\n    \n    render() {\n        return (\n            <Link to={`/season/${this.props.year}/champion/${this.props.winnerid}`}  >\n\n                <MDBCard news className=\"hoverable\" style={{ marginTop: \"1rem\" }}>\n                    <MDBCardBody>\n                        <MDBCardTitle className=\"text-center blue-grey-text\" style={{ fontSize: '17px' }}>{this.props.year}</MDBCardTitle>\n                        <MDBCardText className=\"text-center cyan-text font-weight-bold justify-content-around\" style={{ fontSize: '19px' }}>\n                            {this.props.driver.givenName} {this.props.driver.familyName}\n                        </MDBCardText>\n                        <div className=\"d-flex flex-row justify-content-around\">\n                            <div className=\"p-2 orange-text\"><i class=\"fas fa-award\" ></i> {this.props.won}</div>\n\n                            <div className=\"p-2 teal-text\"><i class=\"fas fa-star\" ></i> {this.props.points}</div>\n                        </div>\n                    </MDBCardBody>\n                </MDBCard>\n            </Link>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Navbar from '../components/navbar'\nimport YearCard from '../components/yearcard'\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport { MDBRow, MDBContainer, MDBCol } from 'mdbreact';\n\nexport default class HomePage extends Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state = { name: \"Anand Kumar Chaudhary\", race_list: [] };\n\n    console.log(this.props.match.params.id);\n  }\n\n\n  componentDidMount() {\n\n    let url = 'https://ergast.com/api/f1/driverStandings/1.json?limit=11&offset=55';\n\n    fetch(url).then(response => response.json()).then((repos) => {\n      console.log(repos.MRData.StandingsTable.StandingsLists);\n      console.log(repos.length);\n      this.setState({\n        race_list: repos.MRData.StandingsTable.StandingsLists\n      });\n    });\n\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar></Navbar>\n\n        <MDBContainer fluid>\n\n          <main style={{ marginTop: \"0rem\" }}>\n            {this.state.race_list.length ? (\n              <MDBRow center>\n                {this.state.race_list.map(\n                  function (year, i) {\n                    return (\n                      <MDBCol key={i} size=\"2\"><YearCard driver={year.DriverStandings[0].Driver} won={year.DriverStandings[0].wins} points={year.DriverStandings[0].points} winnerid={year.DriverStandings[0].Driver.driverId} winner={year.DriverStandings[0].Driver.givenName} year={year.season}></YearCard></MDBCol>\n                    )\n                  }\n                )}\n              </MDBRow>\n            ) : (\n                <div className=\"spinner-grow text-info\" style={{ marginLeft: '50%', marginTop: '15%' }} role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n              )}\n\n          </main>\n\n        </MDBContainer>\n\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nexport default class CountryFlag extends Component {\n  country = {\n    spanish: 'es',\n    german: 'de',\n    finnish: 'fi',\n    british: 'gb',\n    australian: 'au',\n    italian: 'it',\n    colombian: 'co',\n    brazilian: 'br',\n    polish: 'pl',\n    venezuelan: 've',\n    french: 'fr',\n    austrian: 'at'\n  }\n  get_country_code(countryname) {\n    countryname = countryname.toLowerCase()\n\n    return this.country[countryname]\n  }\n  render() {\n    return (\n      <img alt={this.props.countryname} src={`https://www.countryflags.io/${this.get_country_code(this.props.countryname)}/flat/16.png`}></img>\n    )\n  }\n}","import React, { Component } from 'react';\nimport '../App.css';\nimport Navbar from '../components/navbar';\nimport CountryFlag from \"../components/countryflag\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBContainer } from 'mdbreact';\n\nexport default class SeasonDetail extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { season_races: [], winner_code: '' };\n    }\n\n\n    componentDidMount() {\n\n        this.setState({})\n\n        let url = `https://ergast.com/api/f1/${this.props.match.params.year}/results/1.json`\n\n        fetch(url).then(response => response.json()).then((repos) => {\n            console.log(repos.MRData.RaceTable.Races);\n            console.log(repos.length);\n            this.setState({\n                season_races: repos.MRData.RaceTable.Races,\n                season: repos.MRData.RaceTable.season,\n                winner_code: this.props.match.params.winnerid\n            });\n        });\n    }\n\n    render() {\n        return (\n\n            <div>\n                <Navbar page='season' year={this.props.match.params.year}></Navbar>\n                <MDBContainer fluid>\n                    {this.state.season_races.length ? (\n                        <MDBTable hover style={{ marginTop: '10px' }}>\n                            <MDBTableHead color=\"info-color-dark\" textWhite>\n                                <tr>\n                                    <th>Round No.</th>\n                                    <th>Race Name</th>\n                                    <th>Circuit Name</th>\n\n                                    <th>Winner</th>\n\n                                    <th>Constructor</th>\n                                    <th>Laps</th>\n                                    <th>Time</th>\n                                </tr>\n                            </MDBTableHead>\n                            <MDBTableBody>\n                                {this.state.season_races.map(\n                                    function (race, i) {\n                                        return (\n\n                                            <tr key={i} style={{ backgroundColor: this.props.match.params.winnerid === race.Results[0].Driver.driverId ? '#fff9c4' : '' }}>\n                                                <td>{i + 1}</td>\n                                                <td>{race.raceName}</td>\n                                                <td>{race.Circuit.circuitName}</td>\n                                                <td><CountryFlag countryname={race.Results[0].Driver.nationality}></CountryFlag> {race.Results[0].Driver.givenName} {race.Results[0].Driver.familyName}</td>\n\n                                                <td>   <MDBBtn outline color=\"info\" href={race.Results[0].Constructor.url} target='blank' size=\"sm\"><CountryFlag countryname={race.Results[0].Constructor.nationality}></CountryFlag> {race.Results[0].Constructor.name}</MDBBtn></td>\n                                                <td>{race.Results[0].laps}</td>\n                                                <td>{race.Results[0].Time.time}</td>\n\n                                            </tr>\n\n\n                                        )\n                                    }.bind(this)\n                                )}\n\n\n                            </MDBTableBody>\n                        </MDBTable>\n\n                    ) : (\n                            <div className=\"spinner-grow text-info\" style={{ marginLeft: '50%', marginTop: '15%' }} role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        )}\n                </MDBContainer>\n            </div>\n\n        )\n    }\n\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport SeasonDetail from \"./pages/SeasonDetail\";\n\n\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n     \n        <Route path=\"/season/:year/champion/:winnerid\" component={SeasonDetail} />\n        <Route path=\"/\" component={HomePage} />\n        \n       \n        <Route\n          render={function () {\n            return <h1>Not Found</h1>;\n          }}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;","import React, { Component } from 'react';\nimport './App.css';\nimport Routes from \"./Routes\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport { BrowserRouter as Router, } from \"react-router-dom\";\n\nexport default class AppRouter extends Component {\n  render() {\n    return (\n\n      <Router>\n        <Routes />\n      </Router>\n\n    )\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}